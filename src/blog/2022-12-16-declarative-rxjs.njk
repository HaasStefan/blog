---
title: Declarative RxJS with Custom Operators
subtitle: Improving the readability of RxJS streams by using custom operators
date: 2022-12-16
tags: featured
description: Usually, RxJS streams tend to get a bit messy and unreadable when a lot of pipe operators are needed. One reason for this unreadability is the imperative nature of these RxJS streams. Therefore, making them declarative by using custom operators makes your streams a lot more clean and readable.
keywords: [angular, rxjs, reactice-x, pipe-operators, custom-operators, declarative-programming]
image: https://i.imgur.com/ICzeSqZ.png
imageAlt:  cover-image
layout: post
---

<p>
    {{description}}
</p>

{% set subHeading = 'Declarative vs Imperative' %}
{% include 'post-elements/sub-heading.njk' %}

{% set code %}const arr = [1, 2, 3, 4, 5, 6];
const even = [];

for (const item of arr) {
  if (item % 2 === 0) {
    even.push(item);
  }
}

console.log(even); // 2, 4, 6{% endset %}
  {% set lang = 'typescript' %}
  {% set caption = 'Imperative style' %}
  {% include 'post-elements/code.njk' %}


{% set code %}const arr = [1, 2, 3, 4, 5, 6];

const even = arr.filter(item => isEven(item));

console.log(even); // 2, 4, 6

function isEven(value: number): boolean {
  return value % 2 === 0;
}{% endset %}
  {% set lang = 'typescript' %}
  {% set caption = 'Declarative style' %}
  {% include 'post-elements/code.njk' %}
<p>

</p>

{% set subHeading = 'Custom Operators' %}
{% include 'post-elements/sub-heading.njk' %}

<p>

</p>